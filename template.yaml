AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  f-app

  Sample SAM Template for f-app

Parameters:
  MasterSecretArn:
    Description: Master Secret ARN
    Type: String
  MasterSecretsManagerKey:
    Description: KMS Key for the use of secrets across accounts
    Type: String
  Stage:
    Description: Environment
    Type: String

  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
# AppSync 
  LectureGraphQLApi:
    Type: 'AWS::AppSync::GraphQLApi'
    Properties:
      Name: !Sub "Emart-CultureClub-Lecture-${Stage}"
      AuthenticationType: "AWS_IAM"

  LectureGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties: 
      ApiId: !GetAtt LectureGraphQLApi.ApiId
      Definition: >
        input InputLecture {
          partitionkey: String
          sortkey: String
          attribute1: String
          attribute2: String
        }

        type Lecture {
          partitionkey: String
          sortkey: String
          attribute1: String
          attribute2: String
        }

        schema {
          query: Query
          mutation: Mutation
        }

        type Mutation {
          createLecture(input: InputLecture): Lecture
        }

        type Query {
          getLectureById(lectureId: String): Lecture
          getLecturesByKeyword(keyword: String): [Lecture]
        }


  CreateLectureResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt LectureGraphQLApi.ApiId
      TypeName: 'Mutation'
      FieldName: 'createLecture'
      DataSourceName: !GetAtt LectureFunctionDatasource.Name

  LectureFunctionDatasource:
    Type: AWS::AppSync::DataSource
    Properties: 
      Name: "LectureFunctionDatasource"
      ApiId: !GetAtt LectureGraphQLApi.ApiId
      Description: "Lecture Datasource with Lambda function"
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt EmartCultureClubLectureLambdaIAMRole.Arn
      LambdaConfig: 
        LambdaFunctionArn: !GetAtt LectureFunction.Arn
          
  EmartCultureClubLectureLambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "*"
                Effect: "Allow"
                Resource:
                  - !GetAtt LectureFunction.Arn
          PolicyName: "EmartCultureClubLectureLambdaRole"
      

  # Lambda
  LectureFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambdaHandler
      CodeUri: dist/
      Runtime: nodejs12.x
      Events:
        SearchKeyword:
          Type: Api 
          Properties:
            Path: /lectures
            Method: get
        SearchKeywordPost:
          Type: Api 
          Properties:
            Path: /lectures
            Method: post
        SearchKeywordCenterNm:
          Type: Api 
          Properties:
            Path: /lectureCenterNm
            Method: get
        SearchKeywordCurriculum:
          Type: Api 
          Properties:
            Path: /lectureCurriculum
            Method: get

      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LectureTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref LectureTable
          SECRET_ARN: !Ref MasterSecretArn
          SECRET_MASTER: !Ref MasterSecretsManagerKey
          STAGE: !Ref Stage

  # Dynamodb
  LectureTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "partitionkey"
          AttributeType: "S"
        -
          AttributeName: "sortkey"
          AttributeType: "S"
        -
          AttributeName: "attribute1"
          AttributeType: "S"
        -
          AttributeName: "attribute2"
          AttributeType: "S"
          
      KeySchema:
        -
          AttributeName: "partitionkey"
          KeyType: "HASH"
        -
          AttributeName: "sortkey"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "GSI-1"
          KeySchema:
            -
              AttributeName: "attribute1"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        -
          IndexName: "GSI-2"
          KeySchema:
            -
              AttributeName: "attribute2"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 15
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref LectureTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
  WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

Outputs:
  WebEndpoint:
    Description: "AppSyncGraphQL endpoint URL for Prod stage"
    Value: !GetAtt LectureGraphQLApi.GraphQLUrl
